{"version":3,"sources":["src/main.js"],"names":["window","onload","urlParams","URLSearchParams","location","search","vue","Vue","el","components","data","profile","coordinates","contours","denoise","generalize","created","mounted","$nextTick","mapboxgl","accessToken","get","localStorage","getItem","map","Map","container","style","center","zoom","hash","addControl","NavigationControl","geolocate","GeolocateControl","on","geolocation","coords","longitude","latitude","geocoder","MapboxGeocoder","response","result","marker","Marker","draggable","getLngLat","toArray","addSource","type","features","addLayer","id","source","layout","paint","e","lngLat","wrap","watch","value","setLngLat","addTo","isochrone","methods","xhr","XMLHttpRequest","open","Math","floor","status","console","error","responseText","geojson","JSON","parse","getSource","setData","fitBounds","turf","bbox","padding","duration","send"],"mappings":"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","file":"main.da7cc78e.js","sourceRoot":"..","sourcesContent":["/* jshint browser:true,curly: false */\n/* global L */\n\nwindow.onload = () => {\n    let urlParams = new URLSearchParams(window.location.search);\n    window.vue = new Vue({\n        el: '#app',\n        components: {\n        },\n        data: {\n            profile: 'driving',\n            coordinates: null,\n            contours: '15,30,45,60',\n            denoise: 1.0,\n            generalize: 5\n        },\n        created: function() {\n        },\n        mounted: function() {\n            this.$nextTick(function() {\n                mapboxgl.accessToken = urlParams.get('access_token') || localStorage.getItem('MapboxAccessToken');\n                this.map = new mapboxgl.Map({\n                    container: 'map',\n                    style: 'mapbox://styles/mapbox/streets-v11',\n                    center: [0, 0],\n                    zoom: 0,\n                    hash: true\n                });\n                this.map.addControl(new mapboxgl.NavigationControl());\n                this.geolocate = new mapboxgl.GeolocateControl()\n                this.geolocate.on('geolocate', (geolocation) => {\n                    if (geolocation && geolocation.coords) {\n                        this.coordinates = [geolocation.coords.longitude, geolocation.coords.latitude];\n                    }\n                })\n                this.map.addControl(this.geolocate);\n                this.geocoder = new MapboxGeocoder({\n                    accessToken: mapboxgl.accessToken\n                });\n                this.geocoder.on('result', (response) => {\n                    this.coordinates = response.result.center;\n                });\n                this.map.addControl(this.geocoder, 'top-left');\n\n                this.marker = new mapboxgl.Marker({\n                    draggable: true\n                });\n                this.marker.on('dragend', () => {\n                    this.coordinates = this.marker.getLngLat().toArray();\n                });\n\n                this.map.on('style.load', () => {\n                    this.map.addSource('isochrones', { type: 'geojson', data: {\n                        type: 'FeatureCollection',\n                        features: []\n                    }});\n                    this.map.addLayer({\n                        id: 'fill',\n                        type: 'fill',\n                        source: 'isochrones',\n                        \"layout\": {},\n                        \"paint\": {\"fill-color\": [\"get\", \"fill\"], \"fill-opacity\": 0.3}\n                    });\n                    this.map.addLayer({\n                        id: 'outline-shadow',\n                        type: 'line',\n                        source: 'isochrones',\n                        \"layout\": {},\n                        \"paint\": {\n                            \"line-color\": [\"get\", \"color\"],\n                            \"line-offset\": 3,\n                            \"line-opacity\": 0.3,\n                            \"line-width\": 6\n                        }\n                    });\n                    this.map.addLayer({\n                        id: 'outline',\n                        type: 'line',\n                        source: 'isochrones',\n                        \"layout\": {\"line-join\": \"round\"},\n                        \"paint\": {\n                            \"line-color\": [\"get\", \"color\"],\n                            \"line-opacity\": 1,\n                            \"line-width\": 3\n                        }\n                    });\n                    this.map.addLayer({\n                        id: 'label',\n                        type: 'symbol',\n                        source: 'isochrones',\n                        layout: {\n                            \"text-field\": [\"to-string\", [\"get\", \"contour\"]],\n                            \"symbol-placement\": \"line\",\n                            \"symbol-spacing\": 50,\n                            \"text-font\": [\"Open Sans Bold\", \"Arial Unicode MS Regular\"],\n                            \"text-max-angle\": 35,\n                            \"text-offset\": [0, 0.5]\n                        },\n                        paint: {\n                            \"text-halo-width\": 5,\n                            \"text-halo-color\": [\"get\", \"color\"],\n                            \"text-color\": \"hsl(0, 0%, 100%)\"\n                        }\n                    });\n                });\n\n                this.map.on('load', () => {\n                });\n\n                this.map.on('click', (e) => {\n                    this.coordinates = e.lngLat.wrap().toArray();\n                });\n            });\n        },\n        watch: {\n            coordinates: function(value) {\n                this.marker\n                    .setLngLat(value)\n                    .addTo(this.map);\n                this.isochrone();\n            },\n            profile: function(value) {\n                this.isochrone();\n            },\n            contours: function(value) {\n                this.isochrone();\n            },\n            denoise: function(value) {\n                this.isochrone();\n            },\n            generalize: function(value) {\n                this.isochrone();\n            }\n        },\n        methods: {\n            isochrone: function() {\n                let xhr = new XMLHttpRequest();\n                xhr.open('GET', `https://api.mapbox.com/isochrone/v1/mapbox/${this.profile}/${this.coordinates}?contours_minutes=${this.contours}&polygons=true&generalize=${this.generalize}&denoise=${this.denoise}&access_token=${mapboxgl.accessToken}`);\n                xhr.onload = () => {\n                    if (Math.floor(xhr.status / 100) * 100 !== 200) return console.error(xhr.status, xhr.responseText);\n                    const geojson = JSON.parse(xhr.responseText);\n                    this.map.getSource('isochrones').setData(geojson);\n                    this.map.fitBounds(turf.bbox(geojson), {\n                        padding: 20,\n                        duration: 1000\n                    });\n\n                }\n                xhr.send();\n            }\n        }\n    });\n}\n"]}